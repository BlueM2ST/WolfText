# WolfText
# Author: BlueMist
# https://github.com/BlueM2ST/WolfText
# Text input and extraction tool for the Wolf RPG Editor v2.10D ( â‘¨ en)

==Usage Guide==

This will explain how the WolfText Tool works.

First of all, we should briefly go over the basic vales in the json file.

	"mapDirectory": "MapData/"
	
	This directory determines where the tool looks for the map files. All map files in this folder will be modified
	 and output in the directory "output/", which will be created if it does not exist. The original maps will remain
	 in this directory, unchanged.
	 
	"isExistingGame": "0"
	
	This value changes whether the tool will work in 'extract' or 'insert' mode. Values are '0' and '1'.
	 A value of '0' will run the tool in 'insert' mode. A value of '1' will run the tool in 'extract' mode.
	 
	"text": {
        "From_SampleMapA": {
            "@00001": "@3\\nYuichi\n  \"Hey there, I\\'m Yuichi!\"",
            "@00002": "Yuichi\n  \"I\\'m real hungry! \\n  If you bring me something to eat,\n  I\\'ll join your party!\"",
            "@00003": "@3\\nYuichi\\n  \"Yaaay! Thanks! Munch, munch...\"",
            "@00004": "@3\\nYuichi the Chicken joined the party!",
            "@00005": "@3\\nYuichi\\n  \"Oh, when I\\'m in battle, I act on my own!\"",
            "@00006": "@4\\nWolfarl\\n  \"Mhm. AI-controlled, you mean.\"",
            "@00007": "\"Welcome!\"",
            "@00008": "\"A full recovery it is! Beedledeedledee!\""
        }
    }
	
	This is where the text will be, whether it is extracted, or you are adding the text here for the map directly.
	
		"text": {
		}
		
	This is the main key for the text
	
		"From_SampleMapA": {
		}
		
	This is the name of the map file. This allows the text to be organized by map.
	
		"@00001": "@3\\nYuichi\n  \"Hey there, I\\'m Yuichi!\""
		
	This is the information for inserting the text into the map file.
	
		"@00001" 
		
	This is the key that matches the placeholder text in the map file.
	
		"@3\\nYuichi\n  \"Hey there, I\\'m Yuichi!\""
		
	This is the text that will replace the above key in the map file. Don't worry about the backslashes, they will only appear
	if the text is extracted from a map. You don't need to add them.
	

Using this tool, you would usually manually enter the key value into the game through the editor and then enter the 
 key:value pair into the json file.


Extracting text is pretty straightforward, so let's go over inserting text in more detail
	
	One of the main features of this tool is the ability to automatically add linebreaks when inserting text. This is important to 
	 consider since any linebreaks that are present or that you add in the json file will be removed before the auto-linebreak
	 feature adds new linebreaks.
	 
	Now, there are some downsides to this. For example:
	
		"@00004": "@3\\nYuichi the Chicken joined the party!",
	
	In this case, normal linebreaks are not desired since there needs to be a linebreak after the '@3' and after the character's name.
	 This example is common throughout dialogue if there is a character name and a character image shown on the textbox.
	 This tool handles this common situation properly, but may not work with others that it has not been tested with.
	
	If it finds an unknown situation, the worst case scenario is a broken map where the best case scenario is to manually add the
	 linebreaks after inserting the text after using this tool.
	 
Advanced JSON values

	This section explains the values in the json file in greater detail.
	
	Please note that all the values are required to be in the file and entered correctly for the script to run.
	
		"_version": "1.1"
		
	This is the version number, doesn't do much.
	
		"_isGenerated": "False"
		
	If the file is generated by the extraction tool, this will be True.
	
		"breakCharacter": "\n"
		
	If for some reason the linebreak character(s) in your game are different from default, you can change this value.
	
		"showMessageHex": "65"
		
	This is to reference the address for the `Show Message` command:
	 The whole address looks like:
		
		00 00 01 XX 00 00 00 0Z 01 YY 00 00 00 %b+
		
	Where XX is this `showMessageHex` value.
	 Z is currently unknown, but of no current use to this tool.
	 YY is how many characters, in hex, are in this string.
	 %b+ is the string of however many hex values.
		
		"showChoiceHex": "66"
		
		and
		
		"showCommentHex": "67"
		
	Like above, but for their own commands. Neither are used in this version.
	
		"maxCharactersInt": 61
		
	An integer value of the maximum amount of characters that can fit in the textbox.
	 Used for adding linebreaks.
	 
		"textSet": "@"
		
	The character that all key values will start with. All keys must start with this character, but it can
	 be changed to any character the engine supports (or doesn't support if you will never open this map in the editor before inserting the text).
	
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	